root@1b0b260fd65a:/workspace# python3 run_demo.py
/usr/local/lib/python3.10/dist-packages/sklearn/utils/_param_validation.py:11: UserWarning: A NumPy version >=1.23.5 and <2.3.0 is required for this version of SciPy (detected version 1.23.0)
  from scipy.sparse import csr_matrix, issparse

the pytorch version: 2.4.0+cu121
the gpu count: 4
the current used gpu: 0

previous "./runs" folder exist, will delete this folder
use the final model file.
testing RTFNet: RTFNet_50 on GPU #0 with pytorch
/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet152_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet152_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
loading model file ./weights_backup/RTFNet_50/final.pth...
/workspace/run_demo.py:59: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  pretrained_weight = torch.load(model_file, map_location = lambda storage, loc: storage.cuda(args.gpu))
done!
RTFNet, RTFNet_50, frame 1/6, ['combined_frame_1'], time cost: 716.33 ms, demo result saved.
RTFNet, RTFNet_50, frame 2/6, ['combined_frame_2'], time cost: 29.50 ms, demo result saved.
RTFNet, RTFNet_50, frame 3/6, ['combined_frame_3'], time cost: 30.69 ms, demo result saved.
RTFNet, RTFNet_50, frame 4/6, ['combined_frame_1_calibration'], time cost: 29.84 ms, demo result saved.
RTFNet, RTFNet_50, frame 5/6, ['combined_frame_2_calibration'], time cost: 30.62 ms, demo result saved.
RTFNet, RTFNet_50, frame 6/6, ['combined_frame_3_calibration'], time cost: 30.26 ms, demo result saved.

###########################################################################

RTFNet: RTFNet_50 test results (with batch size 1) on 2024-08-08 using NVIDIA GeForce RTX 2080 Ti:

* the tested dataset name: test
* the tested image count: 6
* the tested image size: 480*640
* the weight name: RTFNet_50
* the file name: final.pth
* recall per class:
    unlabeled: 0.797668, car: 0.004314, person: 0.318186, bike: 0.086716, curve: 0.000000, car_stop: nan, guardrail: nan, color_cone: 0.000000, bump: nan
* iou per class:
    unlabeled: 0.719309, car: 0.004195, person: 0.036868, bike: 0.010785, curve: 0.000000, car_stop: 0.000000, guardrail: 0.000000, color_cone: 0.000000, bump: 0.000000

* average values (np.mean(x)):
 recall: nan, iou: 0.085684
* average values (np.mean(np.nan_to_num(x))):
 recall: 0.134098, iou: 0.085684

* the average time cost per frame (with batch size 1): 30.26 ms, namely, the inference speed is 33.05 fps

###########################################################################
